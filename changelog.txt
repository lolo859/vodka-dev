implement kernel.add
optimise remove_zero function
improved debug line display : the translator now display cell from where the debug instruction come

added comment inside the vodka.cpp file
added kernel.invert instruction to vodka codebase
added ASSIGN, FREE and INVERT systems calls to kernel codebase
added invert_value function
added the ability to remove debug info when debug line is printed by starting a debug line by >>
improved remove_zero function to support negative integers
improved debug mode to show source file from where the line come

adding multiply to vodka codebase
adding BACK systems calls to kernel codebase
added calculate_sign and abs function

improved json export result
variable with the same name will now use ASSIGN to change value
added kernel.free instruction to vodka codebase
variable are now written with ASSIGN syscall
added DUPLICATE systems calls to kernel codebase
added vodka type to vodka codebase
duplicated variable heritate algo_dependant and value properties, everything else is changed/regenerated
variables starting with $$ will be marked as kernel constant and written into data section
they can't be created from duplication or deleted with FREE system call
added a safeguard to prevent modifying vodka and kernel constant or deleting kernel constant
added VODEFINE symbol with the following syntax : £VODEFINE <word to replace> <with this word>
added -r compilation option to ignore VODEFINE replacement declaration

added the ABS syscall to kernel codebase
added kernel.abs to vodka codebase
added the DIVMOD syscall to kernel codebase
added kernel.divmod to vodka codebase

json version is now 3
added a new tag to metadata of outputed json file : json_type
this tag can be kernel or vodka
added a new compilation option : -J
json namespace is now divided between two namespaces : kernel and vodka
vodka::json::vodka contain these class : instruction, symbol, var_declaration, line_container and cell
metadata for jsonkernel isn't regenerated for each line
improved -h option output

added vodec type
added vodka::type::vodec namespace with check_value and remove_zero functions inside
moved all vodka namespace and the log, debuglog, check, error functions as well as cell, symbol and import struct to an external static library
the class, structs and functions from the vodka namespace are inside vodka-lib.h, vodka-type.cpp, vodka-utilities.cpp, vodka-syscalls.cpp, vodka-json.cpp, vodka-analyser.cpp
the log, debuglog, check, error functions as well as cell, symbol and import struct are into the vodka::utilities namespace inside the vodka-utilities.cpp file
created new vodka namespace : vodka::analyser. this will contain every vodka codebase analyse functions and class
created new vodka namespace : vodka::library, this will contain every vodka libray with their parsing and output functions
added vodarg type, used internally for managing cells arguments, can't be created with vodka declaration
vodarg variables can't be duplicated (for the moment)
entire line can now be commented by putting a § at the start of the line

added TOINT and TODEC syscalls with syntax : <syscall_name> <output_uid> <source_uid>
these two syscalls aim to format the value into <source_uid> to integer or decimal number and them put it into <output_uid>
added kernel.toint and kernel.todec to vodka codebase. their syntax are very similar to TOINT and TODEC
for kernel.toint, <output_uid> must be vodint type and <source_uid> can be vodec or vodarg type
for kernel.todec, <output_uid> must be vodec type and <source_uid> can be vodint or vodarg type
added more output coming from comp.sh
added a new structure tree for error displaying, showing from where the error has been triggered (not implemented autmatically)
added new color to certains element inside errors
added new color to certains element inside verbose debug line
added new errors for vodka::analyser and vodka::type that are directly raised inside the corresponding functions

kernel.add now supports vodec datatype but all arguments must of the same datatype
variables list and dict are now stored only the cell being transcoded
added vodka::utilities::var_warning, vodka::analyser::get_arguments 
added indicator of each type of output in each line printed in the console
added warnings for unused variables, can be disabled with the -w option
completely rewritten vodka::type::vodint::remove_zero and vodka::type::vodec::remove_zero
multiply now has two syntax :
- multiply <vodint/vodec output> <vodint/vodec first term> <vodint/vodec second term>
- multiply <vodec output> <vodec first term> <vodec second term> <vodint precision>
these two new syntax result in way less syscalls than before. they use two new syscalls with identical syntax than multiply : MULINT and MULDEC
added kernel.divide with syntax : kernel.divide <vodint/vodec output> <vodint/vodec first term> <vodint/vodec second term> <vodint precision>
added DIVIDE syscall with same syntax

add vodec support to abs syscall
add kernel.mulint and kernel.muldec
update json kernel export to support multiple section (should be modified only inside vodka.cpp)
remove the useless functions inside vodka::type::vodint
set default source for vodka::json::vodka::instruction::source to <builtin>
rename vodka::library::kernel::traitement to vodka::library::kernel::treatement
rename vodka::library::kernel::traitement::kernel_traitement() with vodka::library::kernel::traitement::kernel_treatement()
same thing with vodka instruction
vodka transcoder now add checksum inside the output. can be disabled with -H/--disable-integrity-hash and can be rechecked with -c or --check-mode
add % and # to create decimal and integers variables on the fly without having to declare it
variables can't start with # or %
vodka::syscalls::ABS::info.support_multiple_argument is now set to false
compiling script now check if g++ is installed

made : introduce `enum class` in vodka-lib everywhere it's pertinent 
made : replaced some `const string&` with `string`
made : renamed possibles values for vodka::json::vodka::VodkaLine::thing from `int` and `var` to `instruction` and `variable_declaration`
made : renamed every single attribute, variable and class that need it in order to be more standard and explicit
made : add support for vodec datatype to kernel.invert, kernel.free
made : introduce a datatype checking technic common to all libraries and instructions thats also allow users to use it
made : use the datatype and syscall type everywhere pertinent
made : put split and the other functions inside vodka-lib
made : add a timer system for log output
made : the metadata of a variable is now stored in the general container and not into the datatype-specific container
made : clean transcoder code mainly by reorganizing and renamming
made : use env variables to transmit informations
made : modified json output to match attributes names inside vodka-lib
made : add --version

made : optimized even more define replacement process to be compatible with vodstr syntax and extended the new method to other cells
made : added vodka::utilities::strip function
made : add vodstr
made : compatible with kernel.print/free/toint/todec
made : rework functions organizations in vodka::utilities
made : add tostr instruction (not in kernel internal library)

made : add vodstr.length/concat/substring/charat/reverse/escape/insert/find
made : add vodstr library
made : add LENGTH, CONCAT, SUBSTRING, CHARAT, REVERSE, ESCAPE, INSERT, FIND syscalls
made : move kernel.toint/todec and tostr to the new conversions library
made : move multiply to the new math library
made : all kernel.<instruction> now use a fixed amount of arguments
made : no instructions should modify directely a variable without a workaround
made : add null value for vodint and vodec datatype

for vodka 0.4 :
memory.print/free and math.add now support more than the corresponding arguments for their syscall
dispatching math syscalls from the kernel library to math internal librarie
renamed kernel internal library to memory
added vodka::IndexStartDatatypeReplacement
ability to use direct values declarations into any arguments and not only certains arguments, certains instructions and values aren't eligible
add memory.getmem and GETMEM syscall
planned : generate ourself uuids and hashs
warning : update docs, specify which instruction and argument support datatype replacement 